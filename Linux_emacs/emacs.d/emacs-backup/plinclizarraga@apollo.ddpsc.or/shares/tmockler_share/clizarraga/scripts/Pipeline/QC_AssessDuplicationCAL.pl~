#!/usr/bin/perl
use warnings;
use strict;
use FindBin;
use lib "$FindBin::Bin/Lib";

use Tools;
use Configuration;

use threads;
use threads::shared;
use Thread::Queue;

my $q = Thread::Queue->new();
die "usage: perl $0 <Config file>\n\n" unless $#ARGV==0;
my $Config = Configuration->new($ARGV[0]);

my $nThreads = $Config->get("OPTIONS","Threads");

warn "Recognizing $nThreads as max threading...\n";

my $ref=$Config->get("PATHS","reference");
warn "Finding total number of files...\n";
my @LineNo = $Config->getAll("NUMBER_MULTIPLE");

foreach my $i (@LineNo){
    $q->enqueue($i);
}
for(my$i=0;$i<1;$i++){
    my $thr=threads->create(\&worker);
}
while(threads->list()>0){
    my @thr=threads->list();
    $thr[0]->join();
}


sub worker {
	my $TID=threads->tid() -1 ;
	while(my$j=$q->dequeue_nb()){
            my $prefix;
            my $mult = $Config->get("NUMBER_MULTIPLE",$j);
            if ($mult > 1) {
                $prefix = $Config->get("COMBINE_ACCESSIONS",$j);
            } else {
                $prefix = $Config->get("SINGLE_ACCESSIONS",$j);
            }
            my @accessions = split(/\,/,$Config->get("DATA",$j));
            foreach my $f (@accessions) {
                my $base = $prefix;
                print("I'd like to see this: \n");
                print("prefix: $prefix\n");
                print("base: $base\n");
                print("Filename: $f\n");
#                my $information = substr($f,6,11);
                my $information =~ /(\d+\.\d\.\d+)/;
                print("Unknown information: $information\n");
                my $inputDir = $Config->get("DIRECTORIES","output_dir")."/".$base;
                my $samtools = $Config->get("PATHS","samtools");
                my $bwaRef=$Config->get("DIRECTORIES","output_dir")."/".$base.$information.".ref.fasta";
                my $bwaRoot=$inputDir."/$base.Alignments";
                my $depths =$inputDir."/$base.ContigDepths.txt";

                my $bwaAln=$bwaRoot.".sorted.bam";
                my $command = $samtools." view $bwaAln";
                open(CMD,"-|",$command) || die "cannot run $command\n";
		my @output = <CMD>;
		close CMD;
		#warn $command."\n";
                my %A;
		foreach my $line (@output){
                    my @line = split(/\t/,$line);
                    my ($read,$flag,$chr,$pos,@other)=@line;
                    if(defined($A{$chr})){
                        $A{$chr}{$pos}+=1;
                    }else{
                        $A{$chr}={};
                        $A{$chr}{$pos}+=1;
                    }
		}
		my $rep=0;
		my $sin=0;
		foreach my $chr (keys %A){
                    foreach my $pos (keys %{$A{$chr}}){
                        if($A{$chr}{$pos}>1){
                            $rep++;
                        }else{
                            $sin++;
                        }
                    }
		}
		print "$base\t$sin\t$rep\n";
            }
            
            
        }
        
        
    }


exit(0);


