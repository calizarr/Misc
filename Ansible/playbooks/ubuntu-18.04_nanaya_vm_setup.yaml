---
- hosts: nanaya_vm
  remote_user: "{{ remote_usr | default('calizarr') }}"

  vars:
    apt_repos:
      - 'ppa:alexlarsson/flatpak'
      - 'ppa:ubuntu-elisp/ppa'

    apt_packages:
      - 'build-essential'
      - 'curl'
      - 'emacs-snapshot'
      - 'flatpak'
      - 'fonts-powerline'
      - 'git'
      - 'git'
      - 'libappindicator1'
      - 'libbz2-dev'
      - 'libffi-dev'
      - 'libindicator7'
      - 'liblzma-dev'
      - 'libncurses5-dev'
      - 'libncursesw5-dev'
      - 'libreadline-dev'
      - 'libsdl2-2.0-0'
      - 'libsdl2-dev'
      - 'libsqlite3-dev'
      - 'libssl-dev'
      - 'libxss1'
      - 'linuxbrew-wrapper'
      - 'llvm'
      - 'openjdk-11-jdk'
      - 'python-openssl'
      - 'python-pip' # Needed for terminator themes
      - 'qt5-default'
      - 'terminator'
      - 'tk-dev'
      - 'wget'
      - 'x11-utils' # Mouse binding for back/forward keys
      - 'xautomation' # Mouse binding for back/forward keys
      - 'xclip'
      - 'xz-utils'
      - 'zlib1g-dev'

    system_pip_packages:
      - 'requests' # Needed for terminator themes

    brew_packages:
      - 'fd'
      - 'fzf'
      - 'gcc'
      - 'git'
      - 'hub'
      - 'jq'
      - 'kube-ps1'
      - 'pyenv'
      - 'pyenv-virtualenv'
      - 'ripgrep'
      - 'the_silver_searcher'
      - 'tmux'
      - 'yq'
      - 'zsh'
      - 'zsh-autosuggestions'
      - 'zsh-completions'
      - 'zsh-history-substring-search'
      - 'zsh-syntax-highlighting'

    snap_packages:
      - 'keepassxc'
      - 'docker'
      - 'htop'
    snap_classic_packages:
      - 'slack'

    ssh_items:
      # 0644, u=rw,g-rw,o-rw
      - { src: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa", dest: "{{ ansible_env.HOME }}/.ssh/id_rsa", mode: "u=rw,g-rw,o-rw" }
      - { src: "{{ lookup('env', 'HOME') }}/.ssh/id_rsa.pub", dest: "{{ ansible_env.HOME }}/.ssh/id_rsa.pub", mode: "u=rw,g=r,o=r" }
    install_linuxbrew_if_missing: true
    upgrade_homebrew_packages: false
    change_shell_zsh: false
    scaling_4k: "{{ scale_4k | default(false) }}"
    git_config:
      user:
        email: "{{ git_email | default('None') }}"
        name: "{{ git_user | default('None') }}"

    python_settings:
      latest: "{{ python_latest | default('3.9.0') }}"
      pyenv_init: |
        # Load pyenv automatically by appending
        # the following to ~/.bashrc:

        eval "$(pyenv init -)"

  tasks:

  - name: Add apt repositories
    become: yes
    apt_repository:
      repo: "{{ item }}"
    with_items:
      - "{{ apt_repos }}"

  - name: Apt update and upgrade
    become: yes
    apt:
      upgrade: dist
      update_cache: yes

  - name: Installing multiple packages (emacs, curl, git)
    become: yes
    apt:
      pkg: "{{ apt_packages }}"
      state: present
    register: package_install

  - name: Reboot Ubuntu VM for post package installation
    become: yes
    shell: "sleep 6 && reboot"
    async: 1
    poll: 0
    when: package_install is changed

  - name: Wait for the reboot to complete if there was a change
    wait_for_connection:
      connect_timeout: 20
      sleep: 5
      delay: 180
      timeout: 900
    when: package_install is changed

  - name: Install system python packages
    become: yes
    pip:
      name: "{{ system_pip_packages }}"

  - name: Ensure Linuxbrew is installed
    stat:
      path: "/home/linuxbrew/.linuxbrew"
    register: "linuxbrew_check"

  - name: Fail if Linuxbrew is not installed and install_linuxbrew_if_missing is False
    fail:
      msg: "Linuxbrew is missing...Install it"
    when: >-
      not linuxbrew_check.stat.exists and
      not install_linuxbrew_if_missing

  - name: Create /home/linuxbrew
    become: yes
    file:
      path: /home/linuxbrew
      state: directory
      mode: u=rwx,g=rwx,o=rwx

  - name: Installing Linuxbrew
    shell: |
      CI=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      echo 'eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)' >> ~/.profile
      echo 'eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)' >> ~/.bashrc
      eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
    when: >-
      not linuxbrew_check.stat.exists and
      install_linuxbrew_if_missing

  - name: Ensure Linuxbrew got installed
    stat:
      path: "/home/linuxbrew/.linuxbrew"
    register: "linuxbrew_check_two"

  - name: Updating Linuxbrew
    homebrew:
      update_homebrew: yes
      path: /home/linuxbrew/.linuxbrew/bin/
    when: linuxbrew_check_two.stat.exists

  - name: Installing Linuxbrew packages
    homebrew:
      name: "{{ brew_packages }}"
      state: present
      path: /home/linuxbrew/.linuxbrew/bin/
      upgrade_all: "{{ upgrade_homebrew_packages }}"
    when: linuxbrew_check_two.stat.exists

  - name: Installing Snap packages
    become: yes
    snap:
      name: "{{ snap_packages }}"

  - name: Installing Snap classic confinement packages
    become: yes
    snap:
      classic: yes
      name: "{{ snap_classic_packages }}"

  - name: Use WSL SSH key
    copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      mode: "{{ item.mode }}"
    with_items: "{{ ssh_items }}"

  - name: Check if emacs repo has already been cloned
    stat:
      path: "{{ ansible_env.HOME }}/.emacs.d"
    register: "emacs_repo"

  - name: Get emacs configuration
    git:
      repo: git@github.com:calizarr/.emacs.d.git
      dest: "{{ ansible_env.HOME }}/.emacs.d"
      accept_hostkey: yes
    when: not emacs_repo.stat.exists

  - name: Check if dotfiles repo has already been cloned
    stat:
      path: "{{ ansible_env.HOME }}/GitHub_Repos/Misc"
    register: "dotfiles_repo"

  - name: Get dotfiles etc. repo
    git:
      repo: git@github.com:calizarr/Misc.git
      dest: "{{ ansible_env.HOME}}/GitHub_Repos/Misc"
      accept_hostkey: yes
    when: not dotfiles_repo.stat.exists

  - name: Get Tmux configuration file and symlink
    file:
      src: "{{ ansible_env.HOME }}/GitHub_Repos/Misc/Config_files/tmux_conf_2.9_and_above"
      dest: "{{ ansible_env.HOME }}/.tmux.conf"
      state: link
    when: dotfiles_repo.stat.exists

  - name: Set git config
    shell: |
      git config --global user.email {{ git_config.user.email }}
      git config --global user.name "{{ git_config.user.name }}"

  - name: Check for oh-my-zsh directory
    stat:
      path: "{{ ansible_env.HOME }}/.oh-my-zsh"
    register: oh_my_zsh_dir

  - name: Download Oh My Zsh install file
    get_url:
      url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
      dest: "/tmp/oh-my-zsh_install.sh"
      mode: '0755'
    register: omz_install

  - name: Setting up Oh My Zsh
    shell: |
      . {{ ansible_env.HOME }}/.profile && sh {{ omz_install.dest }} --unattended
    when: not oh_my_zsh_dir.stat.exists
    register: omz_set

  - name: Delete OMZ .zshrc
    file:
      path: "{{ ansible_env.HOME }}/.zshrc"
    when: omz_set.changed

  - name: Check if zsh repo has already been cloned
    stat:
      path: "{{ ansible_env.HOME }}/.zsh.d"
    register: zsh_repo

  - name: Get zsh configuration
    git:
      repo: git@github.com:calizarr/.zsh.d.git
      dest: "{{ ansible_env.HOME }}/.zsh.d"
      accept_hostkey: yes
    when: not zsh_repo.stat.exists

  - name: Check if .zshenv already exists.
    stat:
      path: "{{ ansible_env.HOME }}/.zshenv"
    register: zsh_config

  - name: Creating the .zshenv to point to .zsh.d repo
    copy:
      dest: ~/.zshenv
      content: |
        ZDOTDIR="$HOME/.zsh.d"
        source "$ZDOTDIR/.zshenv"
    when: not zsh_config.stat.exists

  - name: Remove Gnome Animations, Screensaver, Session Idling, Change key-theme
    shell: |
      # Disable All Animations in Ubuntu
      gsettings set org.gnome.desktop.interface enable-animations false
      # Disable Idling Session
      gsettings set org.gnome.desktop.session idle-delay 0
      # Disable Screensaver
      gsettings set org.gnome.desktop.screensaver lock-enabled false
      # Change to emacs key-theme
      gsettings set org.gnome.desktop.interface gtk-key-theme "Emacs"
      # settings set org.gnome.desktop.interface gtk-key-theme "Default"

  - name: Create Terminator plugins directory if it does not exists
    file:
      path: "{{ ansible_env.HOME }}/.config/terminator/plugins"
      state: directory
      mode: '0755'

  - name: Install Terminator themes via wget
    get_url:
      url: https://git.io/v5Zww
      dest: "{{ ansible_env.HOME }}/.config/terminator/plugins/terminator-themes.py"
      mode: '0755'

  - name: Copy Terminator Config to Proper Directory
    copy:
      content: |
        [global_config]
          borderless = True
          enabled_plugins = TerminatorThemes, LaunchpadCodeURLHandler, APTURLHandler, LaunchpadBugURLHandler
        [keybindings]
          hide_window = <Shift><Alt>exclam
          next_tab = <Primary>Tab
          prev_tab = <Primary><Shift>Tab
        [layouts]
          [[default]]
            [[[child1]]]
              parent = window0
              profile = default
              type = Terminal
            [[[window0]]]
              parent = ""
              type = Window
        [plugins]
        [profiles]
          [[default]]
            background_darkness = 0.7
            # background_type = transparent
            background_type = "solid"
            cursor_color = "#aaaaaa"
            font = DejaVu Sans Mono 11
            palette = "#000000:#cc0000:#4e9a06:#c4a000:#3465a4:#75507b:#06989a:#d3d7cf:#555753:#ef2929:#8ae234:#fce94f:#729fcf:#ad7fa8:#34e2e2:#eeeeec"
            show_titlebar = False
            use_system_font = False
      dest: "{{ ansible_env.HOME}}/.config/terminator/config"

  - name: Set Terminator Tab CSS
    copy:
      dest: "{{ ansible_env.HOME }}/.config/gtk-3.0/gtk.css"
      content: |
        .terminator-terminal-window notebook tab {
            background-color: #222;
            padding: 0.2em;
            border: 0;
            border-color: #444;
            border-style: solid;
            border-width: 1px;
        }

        .terminator-terminal-window notebook tab:checked {
            background-color: #000;
            background-image: none;
        }

        .terminator-terminal-window notebook tab label {
            color: #ddd;
        }

        .terminator-terminal-window notebook tab:checked label {
            color: #76C802;
            font-weight: 500;
        }

        .terminator-terminal-window notebook tab button {
            padding: 0;
            background-color: transparent;
            color: #ccc;
        }

        .terminator-terminal-window notebook header {
            background-color: #444;
        }

        .terminator-terminal-window notebook tab button:hover {
            border: 0;
            background-image: none;
            border-color: #444;
            border-style: solid;
            border-width: 1px;
        }

  - name: Set default user python via pyenv
    shell: |
      . {{ ansible_env.HOME }}/.profile && \
      pyenv install -s {{ python_settings.latest }} && \
      pyenv global {{ python_settings.latest }}

  - name: Check if pyenv initialization has been added to .profile
    blockinfile:
      path: "{{ ansible_env.HOME }}/.profile"
      block: "{{ python_settings.pyenv_init }}"
      state: present

  - name: Check if pyenv initialization has been added to .bashrc
    blockinfile:
      path: "{{ ansible_env.HOME }}/.bashrc"
      block: "{{ python_settings.pyenv_init }}"
      state: present

  - name: Docker post-installations steps
    become: yes
    group:
      name: docker
      state: present

  - name: User specific options
    become: yes
    user:
      name: "{{ ansible_user }}"
      groups: docker
      append: yes
      create_home: no
      shell: "/home/linuxbrew/.linuxbrew/bin/zsh"
    when: change_shell_zsh | bool
    register: user_change

  - name: Reboot Ubuntu VM for Groups etc
    become: yes
    shell: "sleep 6 && reboot"
    async: 1
    poll: 0
    when: user_change is changed

  - name: Wait for the reboot to complete if there was a change
    wait_for_connection:
      connect_timeout: 20
      sleep: 5
      delay: 180
      timeout: 900
    when: user_change is changed

  - name: Download Chrome deb
    get_url:
      url: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
      dest: "{{ ansible_env.HOME }}/Downloads/google-chrome-stable_current_amd64.deb"
      mode: '0755'
    register: chrome_deb

  - name: Install Chrome
    become: yes
    apt:
      deb: "{{ chrome_deb.dest }}"

  - name: Edit chrome scale factor on linux
    become: yes
    lineinfile:
      path: /usr/share/applications/google-chrome.desktop
      regexp: '^Exec=/usr/bin/google-chrome-stable .*%U'
      line: Exec=/usr/bin/google-chrome-stable --force-device-scale-factor=1.5 %U
      state: present
    when: scaling_4k | bool

  - name: Gnome mouse pointer and text size for 4k screen
    shell: |
      # Make mouse pointer larger, default 25
      gsettings set org.gnome.desktop.interface cursor-size 48
      # Make text larger, default 1.0
      gsettings set org.gnome.desktop.interface text-scaling-factor 1.3
    when: scaling_4k | bool
