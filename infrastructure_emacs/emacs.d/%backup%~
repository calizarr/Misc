#!/usr/bin/env python
import sys, traceback
import cv2
import numpy as np
import argparse
import string
import plantcv as pcv

### Parse command-line arguments
def options():
  parser = argparse.ArgumentParser(description="Imaging processing with opencv")
  parser.add_argument("-i", "--image", help="Input image file.", required=True)
  parser.add_argument("-m", "--roi", help="Input region of interest file.", required=False)
  parser.add_argument("-o", "--outdir", help="Output directory for image files.", required=True)
  parser.add_argument("-D", "--debug", help="Turn on debug, prints intermediate images.", action="store_true")
  args = parser.parse_args()
  return args

def main():
  args = options()
  device = 0  
  img, path, filename = pcv.readimage(args.image)
  device, s = pcv.rgb2gray_hsv(img, 's', device, args.debug)
  device, threshold_dark= pcv.binary_threshold(s, 60, 255, 'dark', device, args.debug)
  device, mask= pcv.median_blur(threshold_dark, 15, device, args.debug)
  device, binary_img= pcv.median_blur(threshold_dark, 11, device, args.debug)
  device, fill_image= pcv.fill(binary_img, mask, 400, device, args.debug)	
  device, masked = pcv.apply_mask(img, fill_image, 'black', device, args.debug)
  device, id_objects,obj_hierarchy = pcv.find_objects(masked, fill_image, device, args.debug)
  device, roi1, roi_hierarchy= pcv.define_roi(masked,'rectangle', device, None, 'default', args.debug, True, 200, 200,-500,-200)
  device,roi_objects, hierarchy3, kept_mask, obj_area = pcv.roi_objects(img, 'partial', roi1, roi_hierarchy, id_objects, obj_hierarchy, device, args.debug)
  device, obj, mask = pcv.object_composition(img, roi_objects, hierarchy3, device, args.debug)
  device, shape_header,shape_data,shape_img = pcv.analyze_object(img, args.image, obj, mask, device, args.debug, args.outdir+'/'+filename)
  device, color_header,color_data,norm_slice= pcv.analyze_color(img, args.image, kept_mask, 256, device, args.debug, 'all', 'v', 'img', 300, args.outdir+'/'+filename)
  pcv.print_results(args.image, shape_header, shape_data)
  pcv.print_results(args.image, color_header, color_data)
  
if __name__ == '__main__':
	main()
